- // MIR for `get_query` before Inline
+ // MIR for `get_query` after Inline
  
  fn get_query(_1: &T) -> () {
      debug t => _1;                       // in scope 0 at $DIR/dyn-trait.rs:32:31: 32:32
      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:32:38: 32:38
      let _2: &<Q as Query>::C;            // in scope 0 at $DIR/dyn-trait.rs:33:9: 33:10
      let mut _3: &T;                      // in scope 0 at $DIR/dyn-trait.rs:33:22: 33:23
      let mut _4: &<Q as Query>::C;        // in scope 0 at $DIR/dyn-trait.rs:34:23: 34:24
      scope 1 {
          debug c => _2;                   // in scope 1 at $DIR/dyn-trait.rs:33:9: 33:10
+         scope 2 (inlined try_execute_query::<<Q as Query>::C>) { // at $DIR/dyn-trait.rs:34:5: 34:25
+             debug c => _4;               // in scope 2 at $DIR/dyn-trait.rs:34:5: 34:25
+             let mut _5: &dyn Cache<V = <Q as Query>::V>; // in scope 2 at $DIR/dyn-trait.rs:34:5: 34:25
+             let mut _6: &<Q as Query>::C; // in scope 2 at $DIR/dyn-trait.rs:34:5: 34:25
+             scope 3 (inlined mk_cycle::<<Q as Query>::V>) { // at $DIR/dyn-trait.rs:34:5: 34:25
+                 debug c => _5;           // in scope 3 at $DIR/dyn-trait.rs:34:5: 34:25
+                 let mut _7: &dyn Cache<V = <Q as Query>::V>; // in scope 3 at $DIR/dyn-trait.rs:34:5: 34:25
+             }
+         }
      }
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:33:9: 33:10
          StorageLive(_3);                 // scope 0 at $DIR/dyn-trait.rs:33:22: 33:23
          _3 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:33:22: 33:23
          _2 = <Q as Query>::cache::<T>(move _3) -> bb1; // scope 0 at $DIR/dyn-trait.rs:33:13: 33:24
                                           // mir::Constant
                                           // + span: $DIR/dyn-trait.rs:33:13: 33:21
                                           // + user_ty: UserType(0)
                                           // + literal: Const { ty: for<'r> fn(&'r T) -> &'r <Q as Query>::C {<Q as Query>::cache::<T>}, val: Value(Scalar(<ZST>)) }
      }
  
      bb1: {
          StorageDead(_3);                 // scope 0 at $DIR/dyn-trait.rs:33:23: 33:24
          StorageLive(_4);                 // scope 1 at $DIR/dyn-trait.rs:34:23: 34:24
          _4 = &(*_2);                     // scope 1 at $DIR/dyn-trait.rs:34:23: 34:24
-         _0 = try_execute_query::<<Q as Query>::C>(move _4) -> bb2; // scope 1 at $DIR/dyn-trait.rs:34:5: 34:25
+         StorageLive(_5);                 // scope 2 at $DIR/dyn-trait.rs:34:5: 34:25
+         StorageLive(_6);                 // scope 2 at $DIR/dyn-trait.rs:34:5: 34:25
+         _6 = _4;                         // scope 2 at $DIR/dyn-trait.rs:34:5: 34:25
+         _5 = move _6 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn-trait.rs:34:5: 34:25
+         StorageDead(_6);                 // scope 2 at $DIR/dyn-trait.rs:34:5: 34:25
+         StorageLive(_7);                 // scope 3 at $DIR/dyn-trait.rs:34:5: 34:25
+         _7 = _5;                         // scope 3 at $DIR/dyn-trait.rs:34:5: 34:25
+         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(move _7) -> bb2; // scope 3 at $DIR/dyn-trait.rs:34:5: 34:25
                                           // mir::Constant
-                                          // + span: $DIR/dyn-trait.rs:34:5: 34:22
-                                          // + literal: Const { ty: for<'r> fn(&'r <Q as Query>::C) {try_execute_query::<<Q as Query>::C>}, val: Value(Scalar(<ZST>)) }
+                                          // + span: $DIR/dyn-trait.rs:34:5: 34:25
+                                          // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = <Q as Query>::V>) {<dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache}, val: Value(Scalar(<ZST>)) }
      }
  
      bb2: {
+         StorageDead(_7);                 // scope 3 at $DIR/dyn-trait.rs:34:5: 34:25
+         StorageDead(_5);                 // scope 2 at $DIR/dyn-trait.rs:34:5: 34:25
          StorageDead(_4);                 // scope 1 at $DIR/dyn-trait.rs:34:24: 34:25
          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:35:1: 35:2
          return;                          // scope 0 at $DIR/dyn-trait.rs:35:2: 35:2
      }
  }
  
