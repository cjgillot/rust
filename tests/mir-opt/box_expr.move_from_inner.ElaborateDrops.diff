- // MIR for `move_from_inner` before ElaborateDrops
+ // MIR for `move_from_inner` after ElaborateDrops
  
  fn move_from_inner() -> () {
      let mut _0: ();
      let _1: std::boxed::Box<S>;
      let mut _2: usize;
      let mut _3: usize;
      let mut _4: *mut u8;
      let mut _5: std::boxed::Box<S>;
      let _6: ();
      let mut _7: S;
+     let mut _8: &mut std::boxed::Box<S>;
+     let mut _9: ();
+     let mut _10: &mut std::boxed::Box<S>;
+     let mut _11: ();
+     let mut _12: *const S;
+     let mut _13: &mut std::boxed::Box<S>;
+     let mut _14: ();
+     let mut _15: *const S;
+     let mut _16: &mut std::boxed::Box<S>;
+     let mut _17: ();
+     let mut _18: *const S;
      scope 1 {
          debug x => _1;
      }
  
      bb0: {
          StorageLive(_1);
          _2 = SizeOf(S);
          _3 = AlignOf(S);
          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> [return: bb1, unwind continue];
      }
  
      bb1: {
          StorageLive(_5);
          _5 = ShallowInitBox(move _4, S);
          (*_5) = S::new() -> [return: bb2, unwind: bb8];
      }
  
      bb2: {
          _1 = move _5;
-         drop(_5) -> [return: bb3, unwind continue];
+         goto -> bb3;
      }
  
      bb3: {
          StorageDead(_5);
          StorageLive(_6);
          StorageLive(_7);
          _7 = move (*_1);
          _6 = std::mem::drop::<S>(move _7) -> [return: bb4, unwind: bb6];
      }
  
      bb4: {
          StorageDead(_7);
          StorageDead(_6);
          _0 = const ();
-         drop(_1) -> [return: bb5, unwind continue];
+         goto -> bb14;
      }
  
      bb5: {
          StorageDead(_1);
          return;
      }
  
      bb6 (cleanup): {
-         drop(_7) -> [return: bb7, unwind terminate(cleanup)];
+         goto -> bb7;
      }
  
      bb7 (cleanup): {
-         drop(_1) -> [return: bb9, unwind terminate(cleanup)];
+         goto -> bb17;
      }
  
      bb8 (cleanup): {
-         drop(_5) -> [return: bb9, unwind terminate(cleanup)];
+         goto -> bb20;
      }
  
      bb9 (cleanup): {
          resume;
+     }
+ 
+     bb10: {
+         goto -> bb5;
+     }
+ 
+     bb11: {
+         _8 = &mut _1;
+         _9 = <Box<S> as Drop>::drop(move _8) -> [return: bb10, unwind: bb9];
+     }
+ 
+     bb12 (cleanup): {
+         _10 = &mut _1;
+         _11 = <Box<S> as Drop>::drop(move _10) -> [return: bb9, unwind terminate(cleanup)];
+     }
+ 
+     bb13: {
+         goto -> bb11;
+     }
+ 
+     bb14: {
+         _12 = copy ((_1.0: std::ptr::Unique<S>).0: std::ptr::NonNull<S>) as *const S (Transmute);
+         goto -> bb13;
+     }
+ 
+     bb15 (cleanup): {
+         _13 = &mut _1;
+         _14 = <Box<S> as Drop>::drop(move _13) -> [return: bb9, unwind terminate(cleanup)];
+     }
+ 
+     bb16 (cleanup): {
+         goto -> bb15;
+     }
+ 
+     bb17 (cleanup): {
+         _15 = copy ((_1.0: std::ptr::Unique<S>).0: std::ptr::NonNull<S>) as *const S (Transmute);
+         goto -> bb16;
+     }
+ 
+     bb18 (cleanup): {
+         _16 = &mut _5;
+         _17 = <Box<S> as Drop>::drop(move _16) -> [return: bb9, unwind terminate(cleanup)];
+     }
+ 
+     bb19 (cleanup): {
+         goto -> bb18;
+     }
+ 
+     bb20 (cleanup): {
+         _18 = copy ((_5.0: std::ptr::Unique<S>).0: std::ptr::NonNull<S>) as *const S (Transmute);
+         goto -> bb19;
      }
  }
  
