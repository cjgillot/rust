- // MIR for `redundant_drop_flags` before JumpThreading
+ // MIR for `redundant_drop_flags` after JumpThreading
  
  fn redundant_drop_flags(_1: Container) -> Option<String> {
      debug container => _1;
      let mut _0: std::option::Option<std::string::String>;
      let mut _2: isize;
      let _3: std::string::String;
      let mut _4: std::string::String;
      scope 1 {
          debug s => _3;
      }
  
      bb0: {
          _2 = discriminant(_1);
-         switchInt(move _2) -> [0: bb1, 1: bb1, 2: bb3, 3: bb2, otherwise: bb6];
+         switchInt(move _2) -> [0: bb1, 1: bb7, 2: bb3, 3: bb2, otherwise: bb6];
      }
  
      bb1: {
          _0 = Option::<String>::None;
          goto -> bb5;
      }
  
      bb2: {
          StorageLive(_3);
          _3 = move ((_1 as Full2).0: std::string::String);
          goto -> bb4;
      }
  
      bb3: {
          StorageLive(_3);
          _3 = move ((_1 as Full1).0: std::string::String);
          goto -> bb4;
      }
  
      bb4: {
          StorageLive(_4);
          _4 = move _3;
          _0 = Option::<String>::Some(move _4);
          StorageDead(_4);
          StorageDead(_3);
          goto -> bb5;
      }
  
      bb5: {
          return;
      }
  
      bb6: {
          unreachable;
+     }
+ 
+     bb7: {
+         goto -> bb1;
      }
  }
  
