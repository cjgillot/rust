// MIR for `forward_loop` after PreCodegen

fn forward_loop(_1: u32, _2: u32, _3: impl Fn(u32)) -> () {
    debug start => _1;
    debug end => _2;
    debug f => _3;
    let mut _0: ();
    let mut _6: std::option::Option<u32>;
    let mut _8: &impl Fn(u32);
    let mut _9: (u32,);
    let _10: ();
    scope 1 {
        debug ((iter: std::ops::Range<u32>).0: u32) => _1;
        debug ((iter: std::ops::Range<u32>).1: u32) => _2;
        let _7: u32;
        scope 2 {
            debug x => _7;
        }
        scope 4 (inlined iter::range::<impl Iterator for std::ops::Range<u32>>::next) {
            scope 5 (inlined <std::ops::Range<u32> as iter::range::RangeIteratorImpl>::spec_next) {
                let mut _4: bool;
                let _5: u32;
                scope 6 {
                }
                scope 7 (inlined std::cmp::impls::<impl PartialOrd for u32>::lt) {
                }
            }
        }
    }
    scope 3 (inlined <std::ops::Range<u32> as IntoIterator>::into_iter) {
    }

    bb0: {
        goto -> bb1;
    }

    bb1: {
        StorageLive(_6);
        StorageLive(_5);
        StorageLive(_4);
        _4 = Lt(_1, _2);
        switchInt(move _4) -> [0: bb2, otherwise: bb4];
    }

    bb2: {
        StorageDead(_4);
        StorageDead(_5);
        StorageDead(_6);
        drop(_3) -> [return: bb3, unwind unreachable];
    }

    bb3: {
        return;
    }

    bb4: {
        _5 = _1;
        _1 = <u32 as Step>::forward_unchecked(_5, const 1_usize) -> [return: bb5, unwind unreachable];
    }

    bb5: {
        _6 = Option::<u32>::Some(_5);
        StorageDead(_4);
        StorageDead(_5);
        _7 = ((_6 as Some).0: u32);
        StorageLive(_8);
        _8 = &_3;
        StorageLive(_9);
        _9 = (_7,);
        _10 = <impl Fn(u32) as Fn<(u32,)>>::call(move _8, move _9) -> [return: bb6, unwind unreachable];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        goto -> bb1;
    }
}
