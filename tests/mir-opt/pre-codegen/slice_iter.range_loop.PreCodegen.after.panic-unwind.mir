// MIR for `range_loop` after PreCodegen

fn range_loop(_1: &[T], _2: impl Fn(usize, &T)) -> () {
    debug slice => _1;
    debug f => _2;
    let mut _0: ();
    let mut _3: usize;
    let mut _4: std::ops::Range<usize>;
    let mut _5: std::ops::Range<usize>;
    let mut _11: std::option::Option<usize>;
    let mut _13: usize;
    let mut _14: bool;
    let mut _16: &impl Fn(usize, &T);
    let mut _17: (usize, &T);
    let _18: ();
    let mut _19: &mut std::ops::Range<usize>;
    scope 1 {
        debug iter => _5;
        let _12: usize;
        scope 2 {
            debug i => _12;
            let _15: &T;
            scope 3 {
                debug x => _15;
            }
        }
        scope 5 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) {
            debug self => _19;
            scope 6 (inlined <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next) {
                debug self => _19;
                let mut _8: bool;
                let _9: usize;
                let mut _10: usize;
                let mut _20: &usize;
                let mut _21: &usize;
                scope 7 {
                    debug old => _9;
                    scope 8 {
                    }
                }
                scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::lt) {
                    debug self => _20;
                    debug other => _21;
                    let mut _6: usize;
                    let mut _7: usize;
                }
            }
        }
    }
    scope 4 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) {
        debug self => _4;
    }

    bb0: {
        StorageLive(_3);
        _3 = Len((*_1));
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: move _3 };
        StorageDead(_3);
        StorageLive(_5);
        _5 = move _4;
        goto -> bb1;
    }

    bb1: {
        StorageLive(_11);
        StorageLive(_9);
        StorageLive(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_6);
        _6 = (_5.0: usize);
        StorageLive(_7);
        _7 = (_5.1: usize);
        _8 = Lt(move _6, move _7);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_21);
        StorageDead(_20);
        switchInt(move _8) -> [0: bb2, otherwise: bb4];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_9);
        StorageDead(_11);
        StorageDead(_5);
        drop(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4: {
        _9 = (_5.0: usize);
        StorageLive(_10);
        _10 = <usize as Step>::forward_unchecked(_9, const 1_usize) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        (_5.0: usize) = move _10;
        StorageDead(_10);
        _11 = Option::<usize>::Some(_9);
        StorageDead(_8);
        StorageDead(_9);
        _12 = ((_11 as Some).0: usize);
        _13 = Len((*_1));
        _14 = Lt(_12, _13);
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> [success: bb6, unwind: bb8];
    }

    bb6: {
        _15 = &(*_1)[_12];
        StorageLive(_16);
        _16 = &_2;
        StorageLive(_17);
        _17 = (_12, _15);
        _18 = <impl Fn(usize, &T) as Fn<(usize, &T)>>::call(move _16, move _17) -> [return: bb7, unwind: bb8];
    }

    bb7: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_11);
        goto -> bb1;
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}
