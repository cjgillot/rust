- // MIR for `disappearing_bb` before JumpThreading
+ // MIR for `disappearing_bb` after JumpThreading
  
  fn disappearing_bb(_1: u8) -> u8 {
      let mut _0: u8;
      let mut _2: i8;
      let mut _3: bool;
      let mut _4: bool;
  
      bb0: {
          _4 = const false;
          _3 = const false;
          _4 = const true;
          _3 = const true;
          switchInt(_1) -> [0: bb3, 1: bb3, 2: bb1, otherwise: bb2];
      }
  
      bb1: {
          _3 = const false;
-         goto -> bb4;
+         goto -> bb9;
      }
  
      bb2: {
          unreachable;
      }
  
      bb3: {
          _4 = const false;
          goto -> bb4;
      }
  
      bb4: {
          switchInt(_3) -> [0: bb5, otherwise: bb7];
      }
  
      bb5: {
          switchInt(_4) -> [0: bb6, otherwise: bb8];
      }
  
      bb6: {
          return;
      }
  
      bb7: {
          goto -> bb5;
      }
  
      bb8: {
          goto -> bb6;
+     }
+ 
+     bb9: {
+         goto -> bb5;
      }
  }
  
